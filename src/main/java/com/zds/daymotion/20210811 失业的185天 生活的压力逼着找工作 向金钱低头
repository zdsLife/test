

把容易忘得 不理解的 抄下来记笔记 反复琢磨
多去实践 做实验
===================================应对面试===================================

笔试
一.java 基础
1.String final 修饰的 char[] 数组 基于缓存的常量池 双引号直接赋值 还是 new String()
com.zds.interview.question.answer.to.code.UseString

2.单例里面的双重检查 com.zds.study.singleton.DoubleCheckSingleton

3.java 里面的 关键词字 static enum transient volatile

4.集合 hashmap 数组 链表 红黑树    并发包下的集合 集合与线程安全 同步关键字
从各个不同集合的时间复杂度回答

5.同步关键字synchronized 加锁 优化后的 锁升级
com/zds/study/lock/synchronized
com/zds/study/lock/对于java编程里面的锁分析

6.权限关键字的 最松public  最严private 四个范围 同类 同包 不同包子类 不同包不是子类 私有默认保护公共
  mysql 不同隔离级别下 产生的 幻读 脏读 不可重复读问题

7.关于父子类 里面的 构造方法 和静态代码块的 执行顺序
com.zds.interview.code.B
com.zds.interview.t1.HelloA

8.回调函数 动态代理（asm技术生成的字节码.class）

9.cookie 和session
com/zds/study/browser/浏览器里面的会话cookie和服务器后端里面的session

10.多线程
com.zds.study.thread.Print10ABC

11.构造器 Constructor 是否可被 override ?
父类的私有属性和构造方法并不能被继承，所以
 Constructor 也就不能被 override（重写）,但是可以 overload（重载）,
 所以你可以看到一个类中有多个构造函数的情况。
12.重载和重写的区别
重载： 发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，
方法返回值和访问修饰符可以不同，发生在编译时。 　　
重写： 发生在父子类中，方法名、参数列表必须相同，返回值范围小于等于父类，
抛出的异常范围小于等于父类，访问修饰符范围大于等于父类；
如果父类方法访问修饰符为 private 则子类就不能重写该方法
13.Java 面向对象编程三大特性: 封装 继承 多态
封装 把一个对象的属性私有化，同时提供一些可以被外界访问的属性的方法，
如果属性不想被外界访问，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，
那么这个类也没有什么意义了。

继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，
但不能选择性地继承父类。通过使用继承我们能够非常方便地复用以前的代码。关于继承如下 3 点请记住：
子类拥有父类非 private 的属性和方法。 
类可以拥有自己属性和方法，即子类可以对父类进行扩展。 
子类可以用自己的方式实现父类的方法。（以后介绍）。 

多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，
而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，
该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。
在 Java 中有两种形式可以实现多态：继承（多个子类对同一方法的重写）和接口（实现接口并覆盖接口中同一方法）。
14.String StringBuffer 和 StringBuilder 的区别是什么 String 为什么是不可变的
String 类中使用 final 关键字字符数组保存字符串
StringBuilder 与StringBuffer 都继承自 AbstractStringBuilder 类，
在 AbstractStringBuilder 中也是使用字符数组保存字符串char[]value 但是没有用 final 关键字修饰

三者使用的总结：
操作少量的数据 = String
单线程操作字符串缓冲区下操作大量数据 = StringBuilder
多线程操作字符串缓冲区下操作大量数据 = StringBuffer

15.无参构造函数和 子父类的关系
Java 程序在执行子类的构造方法之前，如果没有用 super() 来调用父类特定的构造方法，
则会调用父类中“没有参数的构造方法”。因此，如果父类中只定义了有参数的构造方法，
而在子类的构造方法中又没有用 super() 来调用父类
中特定的构造方法，则编译时将发生错误 因为 Java 程序在父类中找不到没有参数的构造方法可供执行。
解决办法是在父类里加上一个不做事且没有参数的构造方法。
16.接口和抽象类的区别是什么
1. 接口的方法默认是 public，所有方法在接口中不能有实现(Java 8 开始
接口方法可以有默认实现），抽象类可以有非抽象的方法
2.   接口中的实例变量默认是 final 类型的，而抽象类中则不一定
3.   一个类可以实现多个接口，但最多只能实现一个抽象类
4.   一个类实现接口的话要实现接口的所有方法，而抽象类不一定
5.   接口不能用 new 实例化，但可以声明，但是必须引用一个实现该接口的对象 从设计层面来说，
抽象是对类的抽象，是一种模板设计，接口是行为的抽象，是一种行为的规范。
17.成员变量与局部变量的区别有那些
1.   从语法形式上，看成员变量是属于类的，而局部变量是在方法中定义的变量或是方法的参数；
成员变量可以被 public,private,static 等修饰符所
修饰，而局部变量不能被访问控制修饰符及 static 所修饰；但是，成员
变量和局部变量都能被 final 所修饰；
2. 从变量在内存中的存储方式来看，成员变量是对象的一部分，而对象存在于堆内存，局部变量存在于栈内存
3. 从变量在内存中的生存时间上看，成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动消失。
4. 成员变量如果没有被赋初值，则会自动以类型的默认值而赋值（一种情况例外被 final 修饰的成员变量也必须显示地赋值）；
而局部变量则不会自动赋值。
18.创建一个对象用什么运算符?对象实体与对象引用有何不同?

19.一个类的构造方法的作用是什么 若一个类没有声明构造方法,该程序能正确执行吗 ?为什么?
主要作用是完成对类对象的初始化工作。可以执行。
因为一个类即使没有声明构造方法也会有默认的不带参数的构造方法
20.在调用子类构造方法之前会先调用父类没有参数的构造方法，其目的是?
帮助子类做初始化工作
21.== 与 equals(重要)
== : 它的作用是判断两个对象的地址是不是相等。即，判断两个对象是不是同
一个对象。(基本数据类型==比较的是值，引用数据类型==比较的是内存地址)
equals() : 它的作用也是判断两个对象是否相等。但它一般有两种使用情况：
•    情况 1：类没有覆盖 equals() 方法。则通过 equals() 比较该类的两个
对象时，等价于通过“==”比较这两个对象。
•    情况 2：类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来
两个对象的内容相等；若它们的内容相等，则返回 true (即，认为这两
个对象相等)。

public class test1 {
    public static void main(String[] args) {
    String a = new String("ab"); // a 为一个引用
        String b = new String("ab"); // b为另一个引用,对象的内容一样
        String aa = "ab"; // 放在常量池中
        String bb = "ab"; // 从常量池中查找
        if (aa == bb) // true
            System.out.println("aa==bb");
            if (a == b) // false，非同一对象
            System.out.println("a==b");
            if (a.equals(b)) // true
            System.out.println("aEQb");
            if (42 == 42.0) { // true
            System.out.println("true");
        }
    }
}

说明： 
•    String 中的 equals 方法是被重写过的，因为 object 的 equals 方法是
比较的对象的内存地址，而 String 的 equals 方法比较的是对象的值。
•    当创建 String 类型的对象时，虚拟机会在常量池中查找有没有已经存
在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 String 对象。
22.hashCode 与 equals（重要） 你重写过 hashcode 和 equals 么，为什么重写 equals
 时必须重写 hashCode 方法？
哈希码的作用是确定该对象在哈希表中的索引位置。
HashSet 如何检查重复”为例子来说明为什么要有 hashCode
当你把对象加入 HashSet 时，HashSet 会先计算对象的 hashcode 值来判断
对象加入的位置，同时也会与其他已经加入的对象的 hashcode 值作比较，如
果没有相符的 hashcode，HashSet 会假设对象没有重复出现。但是如果发现有
相同 hashcode 值的对象，这时会调用 equals（）方法来检查 hashcode 相等的对象是否真的相同。
如果两者相同，HashSet 就不会让其加入操作成功。
如果不同的话，就会重新散列到其他位置。这样我们就大大减少了 equals 的次数，相应就大大提高了执行速度
 hashCode（）与 equals（）的相关规定
1. 如果两个对象相等，则 hashcode 一定也是相同的
2. 两个对象相等,对两个对象分别调用 equals 方法都返回 true
3. 两个对象有相同的 hashcode 值，它们也不一定是相等的
4. 因此，equals 方法被覆盖过，则 hashCode 方法也必须被覆盖
5. hashCode() 的默认行为是对堆上的对象产生独特值。如果没有重写 hashCode()，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）

23.List 和 Set 的区别

List , Set 都是继承自 Collection 接口 List 特点：元素有放入顺序，元素可重复 ，
Set 特点：元素无放入顺序，元素不可重复，重复元素会覆盖掉，
（元素虽然无放入顺序，但是元素在set中的位置是有该元素的 HashCode 决定的，
其位置其实是固定的，加入Set 的 Object 必须定义 equals ()方法 ，
另外list支持for循环，也就是通过下标来遍历，也可以用迭代器，
但是set只能用迭代，因为他无序，无法用下标来取得想要的值。）
Set和List对比 Set：检索元素效率低下，删除和插入效率高，
插入和删除不会引起元素位置改变。List：和数组类似，List可以动态增长，
查找元素效率高，插入删除元素效率低，因为会引起其他元素位置改变
24.HashMap 1.7 与 1.8 的 区别，说明 1.8 做了哪些优化，如何优化的？
数组存的是这个值得哈希码取模之后在数组的索引位置 当发生哈希取模之后一样后
会在同一个数组位置作为链表的头部往后加
25.`final finally finalize`
- final可以修饰类、变量、方法，修饰类表示该类不能被继承、修饰方法表示该方法不能被重写、
修饰变量表示该变量是一个常量不能被重新赋值。
- finally一般作用在try-catch代码块中，在处理异常的时候，
通常我们将一定要执行的代码方法finally代码块中，表示不管是否出现异常，
该代码块都会执行，一般用来存放一些关闭资源的代码。
- finalize是一个方法，属于Object类的一个方法，
而Object类是所有类的父类，该方法一般由垃圾回收器来调用，当我们调用 System.gc() 方法的时候，
由垃圾回收器调用finalize()，回收垃圾，一个对象是否可回收的最后判断。
26.对象的四种引用和垃圾回收

27.Java获取反射的三种方法
1.通过new对象实现反射机制 2.通过路径实现反射机制 3.通过类名实现反射机制
public class Get {
//获取反射机制三种方式
	public static void main(String[] args) throws ClassNotFoundException {
	//方式一(通过建立对象)
		Student stu = new Student();
		Class classobj1 = stu.getClass();
		System.out.println(classobj1.getName()); //方式二（所在通过路径-相对路径）
		Class classobj2 = Class.forName("fanshe.Student");
		System.out.println(classobj2.getName());
		//方式三（通过类名）
		Class classobj3 = Student.class;
		System.out.println(classobj3.getName());
	}
}

Java 反射机制是在运行状态中，对于任意一个类，都能够获得这个类的所有属性和方法，
对于任意一个对象都能够调用它的任意一个属性和方法。
这种在运行时动态的获取信息以及动态调用对象的方法的功能称为 Java 的反射机制。

Class 类与 java.lang.reflect 类库一起对反射的概念进行了支持，
该类库包含了 Field,Method,Constructor 类 (每个类都实现了 Member 接口)。
这些类型的对象时由 JVM 在运行时创建的，用以表示未知类里对应的成员。
这样你就可以使用 Constructor 创建新的对象，用 get() 和 set()
方法读取和修改与 Field 对象关联的字段，用invoke() 方法调用与 Method 对象关联的方法。
另外，还可以调用 getFields() getMethods() 和
getConstructors() 等很便利的方法，以返回表示字段，方法，以及构造器的对象的数组。这样匿名对象的信息
就能在运行时被完全确定下来，而在编译时不需要知道任何事情。
28.spring中bean的生命周期 和线程的生命周期

Bean的生命周期由两组回调（call back）方法组成。 

 初始化之后调用的回调方法。 

 销毁之前调用的回调方法。 
29.线程池的原理，为什么要创建线程池？创建线程池的方式
一个线程池的几个参数的含义

public ThreadPoolExecutor(int corePoolSize,  // 核心线程数量大小
			int maximumPoolSize, // 线程池最大容纳线程数
			long keepAliveTime, // 线程空闲后的存活时长
			TimeUnit unit,
			//缓存异步任务的队列 //用来构造线程池里的worker线程
			BlockingQueue<Runnable> workQueue,
			ThreadFactory threadFactory,
			//线程池任务满载后采取的任务拒绝策略
			RejectedExecutionHandler handler)

1. 当线程池中线程数量小于 corePoolSize 则创建线程，并处理请求。
2. 当线程池中线程数量大于等于 corePoolSize 时，则把请求放入 workQueue 中,
随着线程池 中的核心线程们不断执行任务，只要线程池中有空闲的核心线程，
线程池就从 workQueue 中取 任务并处理。
3. 当 workQueue 已存满，放不下新任务时则新建非核心线程入池，
并处理请求直到线程数目 达到 maximumPoolSize（最大线程数量设置值）。
4. 如果线程池中线程数大于 maximumPoolSize 则使用 RejectedExecutionHandler 来进行任 务拒绝处理。




3)线程池大小分配
线程池究竟设置多大要看你的线程池执行的什么任务了，CPU密集型、IO密集型、混合型，任 务类型不同，
设置的方式也不一样。
任务一般分为：CPU密集型、IO密集型、混合型，对于不同类型的任务需要分配不同大小的线 程池。

3.1）CPU密集型
尽量使用较小的线程池，一般Cpu核心数+1
3.2）IO密集型
方法一：可以使用较大的线程池，一般CPU核心数 * 2
方法二：（线程等待时间与线程CPU时间之比 + 1）* CPU数目
3.3）混合型    可以将任务分为CPU密集型和IO密集型，然后分别使用不同的线程池去处理，按情况而定
Executor 执行器接口 下的 ThreadPoolExecutor、ThreadScheduledExecutor、ForkJoinPool

30.说说线程安全问题，什么是线程安全，如何实现线程安全
线程安全 -   如果线程执行过程中不会产生 共享资源 的冲突，则线程安全。

线程不安全 - 如果有多个线程  同时在操作   主内存中的变量，则线程不安全
31.实现线程安全的三种方式
1）互斥同步
　　临界区：syncronized、ReentrantLock 　
		信号量 semaphore 　　
		互斥量　mutex
2）非阻塞同步 　　
		CAS（Compare And Swap）
3）无同步方案
		可重入代码 　
		使用Threadlocal 类来包装共享变量，做到每个线程有自己的copy    
		线程本地存储 
32.volatile、ThreadLocal的使用场景和原理
volatile变量进行写操作时，JVM 会向处理器发送一条 Lock 前缀的指令，将这个变量所在缓
存行的数据写会到系统内存。
Lock 前缀指令实际上相当于一个内存屏障（也成内存栅栏），
它确保指令重排序时不会把其 后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面；
volatile的适用场景
1）状态标志,如：初始化或请求停机
2）一次性安全发布，如：单列模式
3）独立观察，如：定期更新某个值
4）“volatile bean” 模式
5) 开销较低的“读－写锁”策略，如：计数器 即在执行到内 存屏障这句指令时，在它前面的操作已经全部完成。
ThreadLocal原理
ThreadLocal是用来维护本线程的变量的，并不能解决共享变量的并发问题。
ThreadLocal是 各线程将值存入该线程的map中，以ThreadLocal自身作为key，
需要用时获得的是该线程之前 存入的值。如果存入的是共享变量，那取出的也是共享变量，并发问题还是存在的。

ThreadLocal的适用场景
场景：数据库连接、Session管理

33.ThreadLocal什么时候会出现OOM的情况？为什么？
ThreadLocal在没有线程池使用的情况下，正常情况下不会存在内存泄露，
但是如果使用了线程 池的话，就依赖于线程池的实现，如果线程池不销毁线程的话，那么就会存在内存泄露。

34.synchronized、volatile区别
1) volatile主要应用在多个线程对实例变量更改的场合，刷新主内存共享变量的值从而使得各个
线程可以获得最新的值，线程读取变量的值需要从主存中读取；synchronized则是锁定当前变 量，
只有当前线程可以访问该变量，其他线程被阻塞住。另外，synchronized还会创建一个内 存屏障，
内存屏障指令保证了所有CPU操作结果都会直接刷到主存中（即释放锁前），从而保证 了操作的内存可见性，
同时也使得先获得这个锁的线程的所有操作
2) volatile仅能使用在变量级别；synchronized则可以使用在变量、方法、和类级别的。
volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞，比如多个线程争抢 synchronized锁对象时，
会出现阻塞。
3) volatile仅能实现变量的修改可见性，不能保证原子性；而synchronized则可以保证变量的 修改可见性和原子性，
因为线程获得锁才能进入临界区，从而保证临界区中的所有语句全部得到 执行。
4) volatile标记的变量不会被编译器优化，可以禁止进行指令重排；synchronized标记的变量 可以被编译器优化。
synchronized：具有原子性，有序性和可见性
粒度：对象锁、类锁

35.
36.
37.
38.
39.
40.
41.
42.
43.
44.
45.
46.
二.SQL 语句的书写
1.行列转换
2.筛选 多用多表关联查询
三.设计类题
四.数据结构和算法 最好结合jdk 里面的集合里面用到的算法来讲
com.zds.study.data structure.array.ArrayReverseOrder

1.如何判断成环
2.把两个链表合并为一个链表
com.zds.study.data structure.linked list.MergeTwoOrderLinkedList
3.排序算法
com.zds.study.data structure.recursion.MonkeyEatPeach
4.递归算法
com.zds.study.data structure.recursion.MonkeyEatPeach

五.读代码题
六.安全相关


技术人员面试
一.简历上的技术逐选择的问
1.java基础
2.spring相关
调用链比较长 吓退了不少人
   你对spring的理解
   三级缓存 循环依赖解决
   事务的传播特性


3.spring cloud 各个组件
4.mysql
1.com/zds/interview/database/mysql/mysql里面的锁
5.redis
6.ES
7.linux简单命令
8.git 简单使用 拉代码 推代码 大码分支合并
9.jvm
二.问项目相关
   1.你觉得你在那些方面做的最好 就是你付出的技术输出 权限设计


hr 面试

高考多少分











