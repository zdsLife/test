



    default DeptDO getDeptDO(String name) {
        Example example = new Example(DeptDO.class);
        Example.Criteria criteria = example.createCriteria();
        criteria.andEqualTo("name", name);
        return (DeptDO) this.selectByExample(example);
    }
  @Override
    public DataPermissionTO getCurrentUserDataPermission() {
        // 从session 里获取当前用户
        DataPermissionTO dataPermissionTO = new DataPermissionTO();
        // 获取当前用户的用户名 username
        dataPermissionTO.setUserName(UserUtil.getUserName());
//        dataPermissionTO.setPublicDeptId(deptMapper.getIdByName(DeptServiceImpl.PUBLIC));
        dataPermissionTO.setPublicDeptId(deptMapper.getDept(DeptServiceImpl.PUBLIC).getId());

        dataPermissionTO.setCurrentUserDeptId(UserUtil.getDeptId());
        // 获取当前session里 用户所拥有的权限码
        dataPermissionTO.setPermissions(UserUtil.getUserPermissions());
        return dataPermissionTO;
    }



    default DeptDO getDept(String name) {
        Example example = new Example(DeptDO.class);
        Example.Criteria criteria = example.createCriteria();
        criteria.andEqualTo("name", name);
        return this.selectOneByExample(example);
    }


  if (tagFilterConditionVO.getUnPagination() == null) {
            log.info("传入的人也页码为：{}",tagFilterConditionVO.getPageIndex());
            PageUtil.setPagePro2(tagFilterConditionVO);
        }


在springboot 2.1.10中引入tk.mapper，自动生成mapper文件。当我在调用mapper.selectOne(T)的时候，我发现当T的属性值均为null的时候，这个方法会遍历整张表

    二期开发效率低总结：
    1.自己改bug的速度 有时会因为一个小问题卡壳
    2.关于 如何和前端 尽可能 最快的配合 要dist包 最快速度
    3.关于自己mysql 的数据存在的问题 还是 es 获取的数据有问题 自己要进行 判断 避免多次 俊雅提出的这种
     快速 判断 此类 问题是es 那边 还是 自己这里的问题 非自己原因产生的问题而浪费的沟通时间
    4.问题定位判定 前端 后端 大数据端 大数据处理的业务端 产品端(提出了不是bug问题)
    5.模拟登录那块 厚磊的账户 有权限码 但是执行的时候
    6.自己多测几遍 自己的接口  尽可能早的联测前后端
    7.对数仓的业务不熟悉
    8.多提pr 把代码书写到 审核没毛病可挑 便于快速合入代码 快速发现问题改bug






    数据权限的功能需求的理解
    超级管理员 看所有部门
    部门标签管理员看 本部门和公开部门的标签
    部门标业务人员看 本部门和公开部门的标签
    功能权限
    本部门的标签管理员 都可以创建标签筛选项 和细则的增删改查

    对于标签筛选项的查看
    超级管理员可以看见所有人（各个部门的标签管理员 和各个部门的业务人员）创建的标签筛选项
    本部门的管理员 可以看见 本部门所有业务人员创建的标签筛选(本部门 作为查看范围的过滤条件)
    本部门的业务人员 只可以看见 自己创建的标签筛选 其他同部门的同事创建的是看不见的



分页的问题：
      标签筛选项列表查询
      问题描述：标签筛选项列表查询 点击分页 多次输入1没有空指针问题 输入页码2 会报空指针异常？？？
      之前的思考思路方向：怀疑是不是tk.mybatis selectOne 方法 没有正确的执行

      因为这个标签选项列表查询涉及数据权限
      所以在获取 这个列表之前 会从数据库拿到公开部门的数据
      第一次读库查询
      第二次读库 根据权限数据 判断 执行对应用户可见的sql
      定位问题代码行：每次都是执行到根据公开的部门名称 获取这个部门id 报错 于是早期决定用 注解@Select里面写sql的方式
      发现问题可以解决 于是就更加怀疑tk.mybatis框架有问题 没有细究到分页的问题

      问题的本质：自己对分页框架理解的不够深刻
      因为部门表里面只有一个公开本部门 我获取部门属于最靠近分页的 第一次查查库 所以每次我多次输入页码1 都是返回
      这个公开部门 但是当我输入页码2的时候 由于查询的数据只有一条 但是第二页的部门没有数据 导致取到的部门对象为null
      但是我是想获取这个部门对象 第二页没有数据
      我是把第二页的数据读出 没有对这个对象判空 直接取里面的id
      所以产生了空指针问题
      问题的解决办法：
        把分页代码靠近对应方法的最终查询的列表数据(实际就是 对那些数据分页的问题)
        这个案例中 我发现 即使第一次查库的部门数据分页导致了空指针
        但是第二个查库的标签筛选列表数据 依旧可以分页


















    @Select("select id from sys_dept where name = #{name}")
//    Integer getIdByName(@Param("name") String name);
//
//    default DeptDO getDept(String name) {
//        Example example = new Example(DeptDO.class);
//        Example.Criteria criteria = example.createCriteria();
//        criteria.andEqualTo("name", name);
//        return this.selectOneByExample(example);
//    }

//        dataPermissionTO.setPublicDeptId(deptMapper.getIdByName(DeptServiceImpl.PUBLIC));
//        dataPermissionTO.setPublicDeptId(deptMapper.getDept(DeptServiceImpl.PUBLIC).getId());

标签细则里面的标签值格式提示
